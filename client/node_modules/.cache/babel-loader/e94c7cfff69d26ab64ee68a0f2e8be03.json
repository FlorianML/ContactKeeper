{"ast":null,"code":"import _objectSpread from \"/Users/Flaplanche/Documents/Workspaces/JS Workspaces/React/contact-keeper/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER, CONTACT_ERROR, GET_CONTACT, CLEAR_CONTACT } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACT:\n      return _objectSpread({}, state, {\n        contacts: action.payload,\n        loading: false\n      });\n\n    case ADD_CONTACT:\n      return _objectSpread({}, state, {\n        contacts: [...state.contacts, action.payload],\n        loading: false\n      });\n\n    case UPDATE_CONTACT:\n      return _objectSpread({}, state, {\n        contacts: state.contacts.map(contact => contact._id === action.payload.id ? action.payload : contact),\n        loading: false\n      });\n\n    case DELETE_CONTACT:\n      return _objectSpread({}, state, {\n        contacts: state.contacts.filter(contact => contact._id !== action.payload),\n        loading: false\n      });\n\n    case SET_CURRENT:\n      return _objectSpread({}, state, {\n        current: action.payload\n      });\n\n    case CLEAR_CURRENT:\n      return _objectSpread({}, state, {\n        current: null\n      });\n\n    case CLEAR_CONTACT:\n      return _objectSpread({}, state, {\n        contacts: null,\n        filtered: null,\n        error: null,\n        current: null\n      });\n\n    case FILTER_CONTACTS:\n      return _objectSpread({}, state, {\n        // filtered: state.contacts.filter((contact) => contact.name.toLowerCase().includes(action.payload.toLowerCase()))\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(\"\".concat(action.payload), 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      });\n\n    case CLEAR_FILTER:\n      return _objectSpread({}, state, {\n        filtered: null\n      });\n\n    case CONTACT_ERROR:\n      return _objectSpread({}, state, {\n        error: action.payload,\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/Flaplanche/Documents/Workspaces/JS Workspaces/React/contact-keeper/client/src/context/contacts/contactReducer.js"],"names":["ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","GET_CONTACT","CLEAR_CONTACT","state","action","type","contacts","payload","loading","map","contact","_id","id","filter","current","filtered","error","regex","RegExp","name","match","email"],"mappings":";AAAA,SACIA,WADJ,EAEIC,cAFJ,EAGIC,WAHJ,EAIIC,aAJJ,EAKIC,cALJ,EAMIC,eANJ,EAOIC,YAPJ,EAQIC,aARJ,EASIC,WATJ,EAUIC,aAVJ,QAWO,UAXP;AAaA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,WAAL;AACI,+BACOE,KADP;AAEIG,QAAAA,QAAQ,EAAEF,MAAM,CAACG,OAFrB;AAGIC,QAAAA,OAAO,EAAE;AAHb;;AAMJ,SAAKf,WAAL;AACI,+BACOU,KADP;AAEIG,QAAAA,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAV,EAAoBF,MAAM,CAACG,OAA3B,CAFd;AAGIC,QAAAA,OAAO,EAAE;AAHb;;AAKJ,SAAKX,cAAL;AACI,+BACOM,KADP;AAEIG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeG,GAAf,CAAmBC,OAAO,IAAIA,OAAO,CAACC,GAAR,KAAgBP,MAAM,CAACG,OAAP,CAAeK,EAA/B,GAAoCR,MAAM,CAACG,OAA3C,GAAqDG,OAAnF,CAFd;AAGIF,QAAAA,OAAO,EAAE;AAHb;;AAKJ,SAAKd,cAAL;AACI,+BACOS,KADP;AAEIG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeO,MAAf,CAAsBH,OAAO,IAAIA,OAAO,CAACC,GAAR,KAAgBP,MAAM,CAACG,OAAxD,CAFd;AAGIC,QAAAA,OAAO,EAAE;AAHb;;AAMJ,SAAKb,WAAL;AACI,+BACOQ,KADP;AAEIW,QAAAA,OAAO,EAAEV,MAAM,CAACG;AAFpB;;AAIJ,SAAKX,aAAL;AACI,+BACOO,KADP;AAEIW,QAAAA,OAAO,EAAE;AAFb;;AAIJ,SAAKZ,aAAL;AACI,+BACOC,KADP;AAEIG,QAAAA,QAAQ,EAAE,IAFd;AAGIS,QAAAA,QAAQ,EAAE,IAHd;AAIIC,QAAAA,KAAK,EAAE,IAJX;AAKIF,QAAAA,OAAO,EAAE;AALb;;AAOJ,SAAKhB,eAAL;AACI,+BACOK,KADP;AAEI;AACAY,QAAAA,QAAQ,EAAEZ,KAAK,CAACG,QAAN,CAAeO,MAAf,CAAsBH,OAAO,IAAI;AACvC,gBAAMO,KAAK,GAAG,IAAIC,MAAJ,WAAcd,MAAM,CAACG,OAArB,GAAgC,IAAhC,CAAd;AACA,iBAAOG,OAAO,CAACS,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BP,OAAO,CAACW,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACH,SAHS;AAHd;;AAQJ,SAAKlB,YAAL;AACI,+BACOI,KADP;AAEIY,QAAAA,QAAQ,EAAE;AAFd;;AAIJ,SAAKf,aAAL;AACI,+BACOG,KADP;AAEIa,QAAAA,KAAK,EAAEZ,MAAM,CAACG,OAFlB;AAGIC,QAAAA,OAAO,EAAE;AAHb;;AAKJ;AAAS,aAAOL,KAAP;AAjEb;AAmEH,CApED","sourcesContent":["import {\n    ADD_CONTACT,\n    DELETE_CONTACT,\n    SET_CURRENT,\n    CLEAR_CURRENT,\n    UPDATE_CONTACT,\n    FILTER_CONTACTS,\n    CLEAR_FILTER,\n    CONTACT_ERROR,\n    GET_CONTACT,\n    CLEAR_CONTACT\n} from '../types'\n\nexport default (state, action) => {\n    switch (action.type) {\n        case GET_CONTACT:\n            return {\n                ...state,\n                contacts: action.payload,\n                loading: false\n            }\n\n        case ADD_CONTACT:\n            return {\n                ...state,\n                contacts: [...state.contacts, action.payload],\n                loading: false\n            }\n        case UPDATE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.map(contact => contact._id === action.payload.id ? action.payload : contact),\n                loading: false\n            }\n        case DELETE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.filter(contact => contact._id !== action.payload),\n                loading: false\n            }\n\n        case SET_CURRENT:\n            return {\n                ...state,\n                current: action.payload\n            }\n        case CLEAR_CURRENT:\n            return {\n                ...state,\n                current: null\n            }\n        case CLEAR_CONTACT:\n            return {\n                ...state,\n                contacts: null,\n                filtered: null,\n                error: null,\n                current: null\n            }\n        case FILTER_CONTACTS:\n            return {\n                ...state,\n                // filtered: state.contacts.filter((contact) => contact.name.toLowerCase().includes(action.payload.toLowerCase()))\n                filtered: state.contacts.filter(contact => {\n                    const regex = new RegExp(`${action.payload}`, 'gi');\n                    return contact.name.match(regex) || contact.email.match(regex);\n                })\n            }\n        case CLEAR_FILTER:\n            return {\n                ...state,\n                filtered: null\n            }\n        case CONTACT_ERROR:\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n            }\n        default: return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}